// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Login /> should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alignItems": "center",
      "children": Array [
        undefined,
        <WithStyles(Grid)
          item={true}
          style={
            Object {
              "padding": "1rem",
            }
          }
        >
          <WithStyles(Input)
            autoComplete="false"
            id="userName"
            onChange={[Function]}
            placeholder="name"
            required={true}
            type="name"
          />
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
          style={
            Object {
              "padding": "1rem",
            }
          }
        >
          <WithStyles(Input)
            placeholder="password"
            type="password"
          />
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
          style={
            Object {
              "padding": "1rem",
            }
          }
        >
          <WithStyles(Button)
            disabled={true}
            id="loginButton"
            onClick={[Function]}
            variant="contained"
          >
            LogIn
          </WithStyles(Button)>
        </WithStyles(Grid)>,
      ],
      "container": true,
      "direction": "column",
      "justify": "center",
      "style": Object {
        "height": "100%",
      },
    },
    "ref": null,
    "rendered": Array [
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Input)
            autoComplete="false"
            id="userName"
            onChange={[Function]}
            placeholder="name"
            required={true}
            type="name"
          />,
          "item": true,
          "style": Object {
            "padding": "1rem",
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoComplete": "false",
            "id": "userName",
            "onChange": [Function],
            "placeholder": "name",
            "required": true,
            "type": "name",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Input)
            placeholder="password"
            type="password"
          />,
          "item": true,
          "style": Object {
            "padding": "1rem",
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "placeholder": "password",
            "type": "password",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Button)
            disabled={true}
            id="loginButton"
            onClick={[Function]}
            variant="contained"
          >
            LogIn
          </WithStyles(Button)>,
          "item": true,
          "style": Object {
            "padding": "1rem",
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "LogIn",
            "disabled": true,
            "id": "loginButton",
            "onClick": [Function],
            "variant": "contained",
          },
          "ref": null,
          "rendered": "LogIn",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alignItems": "center",
        "children": Array [
          undefined,
          <WithStyles(Grid)
            item={true}
            style={
              Object {
                "padding": "1rem",
              }
            }
          >
            <WithStyles(Input)
              autoComplete="false"
              id="userName"
              onChange={[Function]}
              placeholder="name"
              required={true}
              type="name"
            />
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            style={
              Object {
                "padding": "1rem",
              }
            }
          >
            <WithStyles(Input)
              placeholder="password"
              type="password"
            />
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            style={
              Object {
                "padding": "1rem",
              }
            }
          >
            <WithStyles(Button)
              disabled={true}
              id="loginButton"
              onClick={[Function]}
              variant="contained"
            >
              LogIn
            </WithStyles(Button)>
          </WithStyles(Grid)>,
        ],
        "container": true,
        "direction": "column",
        "justify": "center",
        "style": Object {
          "height": "100%",
        },
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Input)
              autoComplete="false"
              id="userName"
              onChange={[Function]}
              placeholder="name"
              required={true}
              type="name"
            />,
            "item": true,
            "style": Object {
              "padding": "1rem",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoComplete": "false",
              "id": "userName",
              "onChange": [Function],
              "placeholder": "name",
              "required": true,
              "type": "name",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Input)
              placeholder="password"
              type="password"
            />,
            "item": true,
            "style": Object {
              "padding": "1rem",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "placeholder": "password",
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              disabled={true}
              id="loginButton"
              onClick={[Function]}
              variant="contained"
            >
              LogIn
            </WithStyles(Button)>,
            "item": true,
            "style": Object {
              "padding": "1rem",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "LogIn",
              "disabled": true,
              "id": "loginButton",
              "onClick": [Function],
              "variant": "contained",
            },
            "ref": null,
            "rendered": "LogIn",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
